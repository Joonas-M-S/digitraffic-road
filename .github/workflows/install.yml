name: Install
on:
    workflow_dispatch:
        inputs:
            env:
                description: 'Environment'
                required: true
                type: environment
                default: 'test'
            ref:
                description: 'Branch/tag/SHA of digitraffic-road-private'
                required: true
                default: 'develop'
            config-repo-branch:
                description: 'Branch or tag of CI-repo'
                required: true
                default: 'master'
            db-install:
                description: 'Run flyway or not'
                required: true
                type: boolean
                default: false
jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
            actions: read
        outputs:
            git_sha: ${{ steps.git_sha.outputs.sha_short }}
        environment: ${{ github.event.inputs.env }}
        steps:
            -   name: Checkout
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.event.inputs.ref }}
            -   name: Set git sha output
                id: git_sha
                run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
            -   name: Checkout dependencies
                uses: actions/checkout@v3
                with:
                    repository: tmfg/digitraffic-build-dependencies
                    ssh-key: ${{ secrets.DEPENDENCY_SSH_KEY }}
                    path: digitraffic-build-dependencies
            -   name: Setup dependencies
                run: cp -R digitraffic-build-dependencies/ ~/.m2/
            -   name: Setup Java
                uses: actions/setup-java@v2.5.0
                with:
                    java-version: 11
                    distribution: temurin
                    cache: maven
            -   name: Build package
                run: |
                    echo Debug!
                    mvn install -DskipTests=true -Ddependency-check.skip=true

                    cp target/*.jar road.jar
            -   name: Upload jar
                uses: actions/upload-artifact@v3
                with:
                    name: road.jar
                    path: road.jar
            -   name: Upload sql
                uses: actions/upload-artifact@v3
                with:
                    name: sql
                    path: dbroad/sql
            -   name: Notify Slack
                if: failure()
                uses: 8398a7/action-slack@v3
                with:
                    status: failure
                    text: FAILED Road deploy/build
                    fields: repo, job, took
                env:
                    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    images:
        needs: build
        strategy:
            matrix:
                app: [daemon, web, db]
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
            actions: read
        environment: ${{ github.event.inputs.env }}
        steps:
            -   name: Checkout CI-repo
                uses: actions/checkout@v3
                with:
                    repository: ${{ secrets.CONFIG_REPO_NAME }}
                    ssh-key: ${{ secrets.CONFIG_REPO_SSH_KEY }}
                    ref: ${{ inputs.config-repo-branch }}
                    path: digitraffic-ci
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    role-to-assume: ${{ secrets.AWS_ROLE }}
                    role-session-name: gh-actions-install-road-${{ matrix.app }}-${{ github.event.inputs.env }}
                    aws-region: ${{ secrets.AWS_REGION }}
            -   name: Login to Amazon ECR
                uses: aws-actions/amazon-ecr-login@v1
            -   name: Download jar
                uses: actions/download-artifact@master
                if: matrix.app != 'db'
                with:
                    name: road.jar
                    path: digitraffic-ci/aws/road.jar
            -   name: Download sql
                uses: actions/download-artifact@master
                if: matrix.app == 'db'
                with:
                    name: sql
                    path: digitraffic-ci/aws/db/sql
            -   name: Build docker image for daemon/web
                if: matrix.app != 'db'
                run: |
                    docker build --no-cache \
                        --build-arg ENV=${{ github.event.inputs.env }} \
                        --build-arg JAR_FILE=road.jar \
                        --build-arg PROPERTY_FILE=conf/road-${{ github.event.inputs.env }}-${{ matrix.app }}.properties \
                        -t ${{ secrets.ECR_URL }}/dt-road-${{ matrix.app }}-repository:${{ needs.build.outputs.git_sha }} \
                        --pull=true --file=digitraffic-ci/aws/Dockerfile-road digitraffic-ci/aws
                    docker push ${{ secrets.ECR_URL }}/dt-road-${{ matrix.app }}-repository:${{ needs.build.outputs.git_sha }}
            -   name: Build docker image for db
                if: matrix.app == 'db'
                run: |
                    docker build --no-cache \
                        -t ${{ secrets.ECR_URL }}/dt-road-${{ matrix.app }}-repository:${{ needs.build.outputs.git_sha }} \
                        --pull=true --file=digitraffic-ci/aws/db/Dockerfile digitraffic-ci/aws/db
                    docker push ${{ secrets.ECR_URL }}/dt-road-${{ matrix.app }}-repository:${{ needs.build.outputs.git_sha }}
            -   name: Notify Slack
                if: failure()
                uses: 8398a7/action-slack@v3
                with:
                    status: failure
                    text: FAILED Road deploy/install
                    fields: repo, job, took
                env:
                    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    install:
        needs: images
        strategy:
            matrix:
                app: [daemon, web, db]
        permissions:
            id-token: write
            contents: read
            actions: read
        runs-on: ubuntu-latest
        steps:
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    role-to-assume: ${{ secrets.AWS_ROLE }}
                    role-session-name: gh-actions-install-road-${{ matrix.app }}-${{ github.event.inputs.env }}
                    aws-region: ${{ secrets.AWS_REGION }}
            -   name: Update ${{ matrix.app }} task-def
                id: update
                uses: tmfg/digitraffic-actions@update-task-def/v1
                with:
                    task-def-file-name: road-${{ github.event.inputs.env }}-${{ matrix.app }}
                    family-name: road-${{ github.event.inputs.env }}-${{ matrix.app }}
                    image-arn: ${{ secrets.ECR_URL }}/dt-road-${{ matrix.app }}-repository:${{ needs.build.outputs.git_sha }}
                    aws-role: ${{ secrets.AWS_ROLE }}
                    aws-region: ${{ secrets.AWS_REGION }}
                    ci-repo-url: ${{ secrets.CONFIG_REPO_NAME }}
                    ci-repo-branch: ${{ github.event.inputs.config-repo-branch }}
                    ci-ssh-key: ${{ secrets.CONFIG_REPO_SSH_KEY }}
    stop_services:
        needs: install
        if: inputs.db_install == true
        strategy:
            matrix:
                app: [ daemon, web ]
        permissions:
            id-token: write
            contents: read
            actions: read
        runs-on: ubuntu-latest
        environment: ${{ github.event.inputs.env }}
        steps:
            -   name: Stop service
                uses: tmfg/digitraffic-actions@ecs-service-update/v1
                with:
                    aws-role: ${{ secrets.AWS_ROLE }}
                    aws-region: ${{ secrets.AWS_REGION }}
                    service-name: road-${{ github.event.inputs.env }}-${{ matrix.app }}-service
                    cluster-name: ${{ secrets.CLUSTER_NAME }}
                    desired-count: 0
    update_db:
        needs: stop_services
        permissions:
            id-token: write
            contents: read
            actions: read
        runs-on: ubuntu-latest
        environment: ${{ github.event.inputs.env }}
        steps:
            -   name: Run flyway
                uses: tmfg/digitraffic-actions@run-ecs-task/v1
                with:
                    aws-role: ${{ secrets.AWS_ROLE }}
                    aws-region: ${{ secrets.AWS_REGION }}
                    task-definition-name: road-${{ github.event.inputs.env }}-db
                    cluster-name: ${{ secrets.CLUSTER_NAME }}
                    network-config: ${{ secrets.NETWORK_CONFIG }}
    deploy:
        needs: [ install, update_db ]
        if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
        strategy:
            matrix:
                app: [ daemon, web ]
        permissions:
            id-token: write
            contents: read
            actions: read
        runs-on: ubuntu-latest
        environment: ${{ github.event.inputs.env }}
        steps:
            -   name: Update ${{ matrix.app }} service
                uses: tmfg/digitraffic-actions@ecs-service-update/v1
                with:
                    aws-role: ${{ secrets.AWS_ROLE }}
                    aws-region: ${{ secrets.AWS_REGION }}
                    service-name: road-${{ github.event.inputs.env }}-${{ matrix.app }}-service
                    cluster-name: ${{ secrets.CLUSTER_NAME }}
                    task-definition: road-${{ github.event.inputs.env }}-${{ matrix.app }}
                    #:${{ steps.update.outputs.revision }}
                    desired-count: 1