<?xml version="1.0"?>
<entity-mappings
    xmlns="http://java.sun.com/xml/ns/persistence/orm"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm
        http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"
    version="2.0">
    <named-query name="exists_with_situation_id">
        <query>
            SELECT CASE WHEN count(situation) > 0 THEN TRUE ELSE FALSE END
            FROM Datex2Situation situation
            WHERE situation.situationId = :situationId
        </query>
    </named-query>

    <named-native-query name="find_latest_import_time">
        <query>
            select max(datex2.import_date) as updated
            from datex2
            where message_type = :messageType
        </query>
    </named-native-query>

    <named-native-query name="find_all_active" result-class="fi.livi.digitraffic.tie.data.model.Datex2">
        <query>
            <![CDATA[
            SELECT d.*
            FROM datex2 d
            WHERE d.id IN (
              SELECT datex2_id
              FROM (
                     SELECT ROW_NUMBER() OVER (PARTITION BY situation.SITUATION_ID ORDER BY d.PUBLICATION_TIME DESC, record.OVERALL_END_TIME DESC NULLS LAST) AS rnum
                       , d.publication_time
                       , d.id AS datex2_id
                       , record.validy_status
                       , nvl(record.overall_end_time, TO_DATE('9999', 'yyyy')) overall_end_time
                     FROM DATEX2 d
                     INNER JOIN datex2_situation situation ON situation.datex2_id = d.id
                     INNER JOIN datex2_situation_record record ON record.datex2_situation_id = situation.id
                     WHERE d.message_type = :messageType
                   ) d2
              WHERE rnum = 1
                    AND (d2.validy_status <> 'SUSPENDED'
                         AND d2.overall_end_time > sysdate)
                    AND d2.publication_time > TO_DATE('201611', 'yyyymm')
            )
            order by d.publication_time, d.id
        ]]>
        </query>
        <hint name="org.hibernate.fetchSize" value="1000" />
    </named-native-query>

    <named-native-query name="find_history" result-class="fi.livi.digitraffic.tie.data.model.Datex2">
        <query>
            <![CDATA[
            SELECT d.*
            FROM datex2 d
            WHERE d.publication_time >= TRUNC(TO_DATE('1.' || :month || '.' || :year, 'DD.MM.YYYY'), 'MONTH')
              AND d.publication_time < LAST_DAY(TO_DATE('1.' || :month || '.' || :year, 'DD.MM.YYYY')) + 1
              AND d.message_type = :messageType
          ]]>
        </query>
        <hint name="org.hibernate.fetchSize" value="1000" />
    </named-native-query>

    <named-native-query name="find_history_by_situation_id" result-class="fi.livi.digitraffic.tie.data.model.Datex2">
        <query>
            <![CDATA[
            SELECT d.*
            FROM datex2 d
            WHERE EXISTS (
              SELECT NULL
              FROM datex2_situation situation
              INNER JOIN datex2_situation_record record ON record.datex2_situation_id = situation.id
              WHERE situation.datex2_id = d.id
                AND situation.situation_id = :situationId
                AND d.publication_time >= TRUNC(TO_DATE('1.' || :month || '.' || :year, 'DD.MM.YYYY'), 'MONTH')
                AND d.publication_time < LAST_DAY(TO_DATE('1.' || :month || '.' || :year, 'DD.MM.YYYY')) + 1
                AND d.message_type = :messageType
            )
          ]]>
        </query>
        <hint name="org.hibernate.fetchSize" value="1000" />
    </named-native-query>

    <named-native-query name="find_by_situation_id_and_message_type" result-class="fi.livi.digitraffic.tie.data.model.Datex2">
        <query>
            <![CDATA[
            SELECT d.*
            FROM datex2 d
            WHERE d.id in (
                SELECT situation.datex2_id
                FROM datex2_situation situation
                WHERE situation.situation_id = :situationId
            )
            AND message_type = :messageType
            ]]>
        </query>
        <hint name="org.hibernate.fetchSize" value="1000" />
    </named-native-query>

    <named-native-query name="list_datex2_situation_version_times">
        <query>
            SELECT situation_id, version_time
            FROM (
                    SELECT ROW_NUMBER() OVER (PARTITION BY situation.SITUATION_ID ORDER BY record.version_time DESC) AS rnum
                  , situation.situation_id
                  , record.version_time
                  , record.validy_status
                 FROM DATEX2 d
                 INNER JOIN datex2_situation situation ON situation.datex2_id = d.id
                 INNER JOIN datex2_situation_record record ON record.datex2_situation_id = situation.id
                 WHERE d.message_type = :messageType
                 ) d2
             WHERE rnum = 1
        </query>
    </named-native-query>
</entity-mappings>
